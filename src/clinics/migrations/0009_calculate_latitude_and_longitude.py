# Generated by Django 3.0.6 on 2020-05-19 09:25
from collections import OrderedDict

from django.db import migrations, models
from googlemaps import Client
import pandas as pd

gmaps = Client(key="AIzaSyBz-RJGVKbiLzBHwJDHOnZXqTxh6HuZM6g")


def forwards(apps, schema_editor):
    pass
    # Clinic = apps.get_model('clinics', 'Clinic')
    # Location = apps.get_model('clinics', 'Location')
    #
    # clinics = Clinic.objects.all().select_related("location")
    # clinics_list = []
    # clinics_id_set = set()
    # index = 0
    #
    # for clinic in clinics:
    #     if clinic.id in clinics_id_set or clinic.location.latitude:
    #         continue
    #     else:
    #         clinics_id_set.add(clinic.id)
    #
    #     subpremise = None
    #     premise = None
    #     street_number = None
    #     street_name = None
    #     suburb = None
    #     state = None
    #     country = None
    #     postcode = None
    #     lat = None
    #     lng = None
    #     error = None
    #
    #     try:
    #         index += 1
    #         location = Location.objects.get(id=clinic.location.id)
    #         place_candidates = gmaps.find_place(input_type="textquery", input=clinic.name)["candidates"]
    #
    #         if not len(place_candidates) == 1:
    #             if len(place_candidates) > 1:
    #                 error = "More than one google places match"
    #             if len(place_candidates) == 0:
    #                 error = "No google places match"
    #             clinics_list.append(OrderedDict({
    #                 "clinic_id": clinic.id,
    #                 "clinic_name": clinic.name,
    #                 "google_name": place_details["name"],
    #                 "old_address": f"{location.street_number} {location.street_name}, {location.suburb} {location.state} {location.postcode}, {location.country}",
    #                 "address": "",
    #                 "website": "",
    #                 "old_phone": clinic.phone,
    #                 "phone": "",
    #                 "business_status": "",
    #                 "lat": "",
    #                 "lng": "",
    #                 "old_country": location.country,
    #                 "country": "",
    #                 "old_state": location.state,
    #                 "state": "",
    #                 "old_postcode": location.postcode,
    #                 "postcode": "",
    #                 "old_suburb": location.suburb,
    #                 "suburb": "",
    #                 "old_street_name": location.street_name,
    #                 "street_name": "",
    #                 "old_street_number": location.street_number,
    #                 "street_number": "",
    #                 "old_subpremise": location.subpremise,
    #                 "subpremise": "",
    #                 "old_premise": location.premise,
    #                 "premise": "",
    #                 "error": error,
    #                 "changed": False,
    #             }))
    #             continue
    #
    #         place = place_candidates[0]
    #         place_details = gmaps.place(place_id=place["place_id"]).get("result")
    #         for component in place_details["address_components"]:
    #             if "subpremise" in component["types"]:
    #                 subpremise = component["long_name"]
    #             elif "premise" in component["types"]:
    #                 premise = component["long_name"]
    #             elif "street_number" in component["types"]:
    #                 street_number = component["long_name"]
    #             elif "route" in component["types"]:
    #                 street_name = component["short_name"]
    #             elif "locality" in component["types"]:
    #                 suburb = component["short_name"]
    #             elif "administrative_area_level_2" in component["types"]:
    #                 continue
    #             elif "administrative_area_level_1" in component["types"]:
    #                 state = component["short_name"]
    #             elif "country" in component["types"]:
    #                 country = component["long_name"]
    #             elif "postal_code" in component["types"]:
    #                 postcode = component["short_name"]
    #             else:
    #                 address_part = component["types"]
    #                 print(f"Unaccounted for address part {address_part} for {clinic.name} ({clinic.id})")
    #
    #         website = place_details.get("website")
    #         phone = place_details.get("formatted_phone_number")
    #         business_status = place_details.get("business_status")
    #         lat = place_details["geometry"]["location"]["lat"]
    #         lng = place_details["geometry"]["location"]["lng"]
    #
    #         if location.country == country and location.state == state and location.postcode == postcode:
    #             clinics_list.append(OrderedDict({
    #                 "clinic_id": clinic.id,
    #                 "clinic_name": clinic.name,
    #                 "google_name": place_details["name"],
    #                 "old_address": f"{location.street_number} {location.street_name}, {location.suburb} {location.state} {location.postcode}, {location.country}",
    #                 "address": place_details["formatted_address"],
    #                 "website": website,
    #                 "old_phone": clinic.phone,
    #                 "phone": phone,
    #                 "business_status": business_status,
    #                 "lat": lat,
    #                 "lng": lng,
    #                 "old_country": location.country,
    #                 "country": country,
    #                 "old_state": location.state,
    #                 "state": state,
    #                 "old_postcode": location.postcode,
    #                 "postcode": postcode,
    #                 "old_suburb": location.suburb,
    #                 "suburb": suburb,
    #                 "old_street_name": location.street_name,
    #                 "street_name": street_name,
    #                 "old_street_number": location.street_number,
    #                 "street_number": street_number,
    #                 "old_subpremise": location.subpremise,
    #                 "subpremise": subpremise,
    #                 "old_premise": location.premise,
    #                 "premise": premise,
    #                 "changed": True,
    #             }))
    #
    #             if suburb:
    #                 location.suburb = suburb
    #             if street_name:
    #                 location.street_name = street_name
    #             if street_number:
    #                 location.street_number = street_number
    #             if subpremise:
    #                 location.subpremise = subpremise
    #             if premise:
    #                 location.premise = premise
    #             if website:
    #                 clinic.website = website
    #             if phone:
    #                 clinic.phone = phone
    #
    #             location.latitude = lat
    #             location.longitude = lng
    #         else:
    #             raise Exception("Place didn't match location")
    #
    #         location.save()
    #         clinic.save()
    #
    #     except Exception as ex:
    #         print(f"Error at clinic #{index} ({clinic.name}): {ex}")
    #         clinics_list.append(OrderedDict({
    #             "clinic_id": clinic.id,
    #             "clinic_name": clinic.name,
    #             "old_address": f"{location.street_number} {location.street_name}, {location.suburb} {location.state} {location.postcode}, {location.country}",
    #             "address": "",
    #             "website": "",
    #             "old_phone": clinic.phone,
    #             "phone": "",
    #             "business_status": "",
    #             "lat": "",
    #             "lng": "",
    #             "old_country": location.country,
    #             "country": "",
    #             "old_state": location.state,
    #             "state": "",
    #             "old_postcode": location.postcode,
    #             "postcode": "",
    #             "old_suburb": location.suburb,
    #             "suburb": "",
    #             "old_street_name": location.street_name,
    #             "street_name": "",
    #             "old_street_number": location.street_number,
    #             "street_number": "",
    #             "old_subpremise": location.subpremise,
    #             "subpremise": "",
    #             "old_premise": location.premise,
    #             "premise": "",
    #             "error": ex,
    #             "changed": False,
    #         }))
    #
    # print(f"Success!")
    # df = pd.DataFrame(clinics_list)
    # df.to_csv("/Users/elliottlovell/Downloads/googlemaps_places_corrections.csv")


def backwards(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('clinics', '0008_location_premise'),
    ]

    operations = [
        migrations.RunPython(forwards, backwards)
    ]
