# Generated by Django 3.0.6 on 2020-05-19 09:25
from collections import OrderedDict

from django.db import migrations, models
from googlemaps import Client
import pandas as pd

gmaps = Client(key="AIzaSyBz-RJGVKbiLzBHwJDHOnZXqTxh6HuZM6g")

# missed_clinic_ids = [
#     "1636",
#     "1674",
#     "1679",
#     "1694",
#     "1697",
#     "1752",
#     "1776",
#     "1801",
#     "1805",
#     "1807",
#     "1850",
#     "1858",
#     "1864",
#     "1866",
#     "1880",
#     "1881",
#     "1885",
#     "1927",
#     "1938",
#     "1972",
#     "1997",
#     "2000",
#     "2001",
#     "2010",
#     "2033",
#     "2034",
#     "2043",
#     "2046",
#     "2064",
#     "2083",
#     "2100",
#     "2111",
#     "2114",
#     "2115",
#     "2129",
#     "2168",
#     "2170",
#     "2179",
#     "2185",
#     "2187",
#     "2208",
#     "2217",
#     "2229",
#     "2232",
#     "2272",
#     "2315",
#     "2321",
#     "2329",
#     "2337",
#     "2346",
#     "2376",
#     "2377",
#     "2380",
#     "1656",
#     "1665",
#     "1676",
#     "1693",
#     "1702",
#     "1709",
#     "1713",
#     "1732",
#     "1735",
#     "1743",
#     "1745",
#     "1746",
#     "1748",
#     "1750",
#     "1755",
#     "1756",
#     "1757",
#     "1758",
#     "1760",
#     "1766",
#     "1778",
#     "1791",
#     "1793",
#     "1794",
#     "1797",
#     "1798",
#     "1806",
#     "1814",
#     "1815",
#     "1817",
#     "1818",
#     "1830",
#     "1845",
#     "1857",
#     "1860",
#     "1884",
#     "1914",
#     "1919",
#     "1920",
#     "1922",
#     "1924",
#     "1930",
#     "1932",
#     "1949",
#     "1954",
#     "1955",
#     "1957",
#     "1958",
#     "1963",
#     "1964",
#     "1966",
#     "1981",
#     "1983",
#     "2054",
#     "2145",
#     "2149",
#     "2197",
#     "2203",
#     "2205",
#     "2207",
#     "2209",
#     "2210",
#     "2211",
#     "2213",
#     "2225",
#     "2226",
#     "2233",
#     "2234",
#     "2239",
#     "2241",
#     "2242",
#     "2248",
#     "2250",
#     "2252",
#     "2253",
#     "2254",
#     "2255",
#     "2258",
#     "2259",
#     "2303",
#     "2310",
#     "2322",
#     "2345",
#     "2353",
#     "2355",
#     "2356",
#     "2359",
#     "2363",
#     "2364",
#     "1634",
#     "1644",
#     "1645",
#     "1646",
#     "1649",
#     "1651",
#     "1657",
#     "1658",
#     "1662",
#     "1663",
#     "1666",
#     "1668",
#     "1670",
#     "1678",
#     "1681",
#     "1684",
#     "1695",
#     "1698",
#     "1703",
#     "1704",
#     "1715",
#     "1727",
#     "1730",
#     "1731",
#     "1761",
#     "1767",
#     "1768",
#     "1770",
#     "1779",
#     "1780",
#     "1783",
#     "1784",
#     "1785",
#     "1792",
#     "1795",
#     "1799",
#     "1803",
#     "1808",
#     "1816",
#     "1819",
#     "1821",
#     "1826",
#     "1833",
#     "1835",
#     "1842",
#     "1848",
#     "1852",
#     "1855",
#     "1859",
#     "1862",
#     "1863",
#     "1865",
#     "1868",
#     "1871",
#     "1872",
#     "1876",
#     "1879",
#     "1888",
#     "1889",
#     "1892",
#     "1900",
#     "1903",
#     "1904",
#     "1905",
#     "1915",
#     "1918",
#     "1929",
#     "1935",
#     "1947",
#     "1951",
#     "1961",
#     "1974",
#     "1991",
#     "1992",
#     "1993",
#     "1995",
#     "2015",
#     "2031",
#     "2042",
#     "2044",
#     "2058",
#     "2062",
#     "2075",
#     "2078",
#     "2091",
#     "2109",
#     "2116",
#     "2127",
#     "2141",
#     "2161",
#     "2162",
#     "2166",
#     "2184",
#     "2201",
#     "2223",
#     "2224",
#     "2227",
#     "2238",
#     "2240",
#     "2243",
#     "2244",
#     "2245",
#     "2247",
#     "2260",
#     "2261",
#     "2265",
#     "2277",
#     "2280",
#     "2283",
#     "2284",
#     "2285",
#     "2290",
#     "2293",
#     "2296",
#     "2299",
#     "2312",
#     "2314",
#     "2317",
#     "2320",
#     "2325",
#     "2333",
#     "2340",
#     "2342",
#     "2343",
#     "2347",
#     "2352",
#     "2366",
#     "2367",
#     "2375",
#     "2378",
# ]


def forwards(apps, schema_editor):
    pass
    # Clinic = apps.get_model('clinics', 'Clinic')
    # Location = apps.get_model('clinics', 'Location')
    #
    # clinics = Clinic.objects.filter(id__in=missed_clinic_ids).select_related("location")
    # clinics_list = []
    # clinics_id_set = set()
    # index = 0
    #
    # for clinic in clinics:
    #     if clinic.id in clinics_id_set or clinic.location.latitude:
    #         continue
    #     else:
    #         clinics_id_set.add(clinic.id)
    #
    #     subpremise = None
    #     premise = None
    #     street_number = None
    #     street_name = None
    #     suburb = None
    #     state = None
    #     country = None
    #     postcode = None
    #     lat = None
    #     lng = None
    #     error = None
    #
    #     try:
    #         index += 1
    #         location = Location.objects.get(id=clinic.location.id)
    #         search_string = f"{clinic.name}{location.street_number} {location.street_name}, {location.suburb} {location.state} {location.postcode}, {location.country}"
    #         place_candidates = gmaps.find_place(input_type="textquery", input=search_string)["candidates"]
    #
    #         if not len(place_candidates) == 1:
    #             if len(place_candidates) > 1:
    #                 error = "More than one google places match"
    #             if len(place_candidates) == 0:
    #                 error = "No google places match"
    #             clinics_list.append(OrderedDict({
    #                 "clinic_id": clinic.id,
    #                 "clinic_name": clinic.name,
    #                 "google_name": place_details["name"],
    #                 "old_address": f"{location.street_number} {location.street_name}, {location.suburb} {location.state} {location.postcode}, {location.country}",
    #                 "address": "",
    #                 "website": "",
    #                 "old_phone": clinic.phone,
    #                 "phone": "",
    #                 "business_status": "",
    #                 "lat": "",
    #                 "lng": "",
    #                 "old_country": location.country,
    #                 "country": "",
    #                 "old_state": location.state,
    #                 "state": "",
    #                 "old_postcode": location.postcode,
    #                 "postcode": "",
    #                 "old_suburb": location.suburb,
    #                 "suburb": "",
    #                 "old_street_name": location.street_name,
    #                 "street_name": "",
    #                 "old_street_number": location.street_number,
    #                 "street_number": "",
    #                 "old_subpremise": location.subpremise,
    #                 "subpremise": "",
    #                 "old_premise": location.premise,
    #                 "premise": "",
    #                 "error": error,
    #                 "changed": False,
    #             }))
    #             continue
    #
    #         place = place_candidates[0]
    #         place_details = gmaps.place(place_id=place["place_id"]).get("result")
    #         for component in place_details["address_components"]:
    #             if "subpremise" in component["types"]:
    #                 subpremise = component["long_name"]
    #             elif "premise" in component["types"]:
    #                 premise = component["long_name"]
    #             elif "street_number" in component["types"]:
    #                 street_number = component["long_name"]
    #             elif "route" in component["types"]:
    #                 street_name = component["short_name"]
    #             elif "locality" in component["types"]:
    #                 suburb = component["short_name"]
    #             elif "administrative_area_level_2" in component["types"]:
    #                 continue
    #             elif "administrative_area_level_1" in component["types"]:
    #                 state = component["short_name"]
    #             elif "country" in component["types"]:
    #                 country = component["long_name"]
    #             elif "postal_code" in component["types"]:
    #                 postcode = component["short_name"]
    #             else:
    #                 address_part = component["types"]
    #                 print(f"Unaccounted for address part {address_part} for {clinic.name} ({clinic.id})")
    #
    #         website = place_details.get("website")
    #         phone = place_details.get("formatted_phone_number")
    #         business_status = place_details.get("business_status")
    #         lat = place_details["geometry"]["location"]["lat"]
    #         lng = place_details["geometry"]["location"]["lng"]
    #
    #         if location.country == country and location.state == state and location.postcode == postcode:
    #             clinics_list.append(OrderedDict({
    #                 "clinic_id": clinic.id,
    #                 "clinic_name": clinic.name,
    #                 "google_name": place_details["name"],
    #                 "old_address": f"{location.street_number} {location.street_name}, {location.suburb} {location.state} {location.postcode}, {location.country}",
    #                 "address": place_details["formatted_address"],
    #                 "website": website,
    #                 "old_phone": clinic.phone,
    #                 "phone": phone,
    #                 "business_status": business_status,
    #                 "lat": lat,
    #                 "lng": lng,
    #                 "old_country": location.country,
    #                 "country": country,
    #                 "old_state": location.state,
    #                 "state": state,
    #                 "old_postcode": location.postcode,
    #                 "postcode": postcode,
    #                 "old_suburb": location.suburb,
    #                 "suburb": suburb,
    #                 "old_street_name": location.street_name,
    #                 "street_name": street_name,
    #                 "old_street_number": location.street_number,
    #                 "street_number": street_number,
    #                 "old_subpremise": location.subpremise,
    #                 "subpremise": subpremise,
    #                 "old_premise": location.premise,
    #                 "premise": premise,
    #                 "changed": True,
    #             }))
    #
    #             if suburb:
    #                 location.suburb = suburb
    #             if street_name:
    #                 location.street_name = street_name
    #             if street_number:
    #                 location.street_number = street_number
    #             if subpremise:
    #                 location.subpremise = subpremise
    #             if premise:
    #                 location.premise = premise
    #             if website:
    #                 clinic.website = website
    #             if phone:
    #                 clinic.phone = phone
    #
    #             location.latitude = lat
    #             location.longitude = lng
    #         else:
    #             raise Exception("Place didn't match location")
    #
    #         location.save()
    #         clinic.save()
    #         print(f"Success for index {index}: Clinic #{clinic.id}")
    #
    #     except Exception as ex:
    #         print(f"Error at clinic #{index} ({clinic.name}): {ex}")
    #         clinics_list.append(OrderedDict({
    #             "clinic_id": clinic.id,
    #             "clinic_name": clinic.name,
    #             "old_address": f"{location.street_number} {location.street_name}, {location.suburb} {location.state} {location.postcode}, {location.country}",
    #             "address": "",
    #             "website": "",
    #             "old_phone": clinic.phone,
    #             "phone": "",
    #             "business_status": "",
    #             "lat": "",
    #             "lng": "",
    #             "old_country": location.country,
    #             "country": "",
    #             "old_state": location.state,
    #             "state": "",
    #             "old_postcode": location.postcode,
    #             "postcode": "",
    #             "old_suburb": location.suburb,
    #             "suburb": "",
    #             "old_street_name": location.street_name,
    #             "street_name": "",
    #             "old_street_number": location.street_number,
    #             "street_number": "",
    #             "old_subpremise": location.subpremise,
    #             "subpremise": "",
    #             "old_premise": location.premise,
    #             "premise": "",
    #             "error": ex,
    #             "changed": False,
    #         }))
    #
    # print(f"Success!")
    # df = pd.DataFrame(clinics_list)
    # df.to_csv("/Users/elliottlovell/Downloads/googlemaps_places_corrections_missed_clinics.csv")


def backwards(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('clinics', '0009_calculate_latitude_and_longitude'),
    ]

    operations = [
        migrations.RunPython(forwards, backwards)
    ]
