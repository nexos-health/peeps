# Generated by Django 3.0.6 on 2020-05-19 09:25

from django.db import migrations, models
import csv
import os
import re

REGION_REGEX = r"(.*)(?<=[a-z])[A-Z]+$"
NAMED_AND_OCCUPATION_REGEX = r"(.*)\s(.*)\s\((.*)\)"


def forwards(apps, schema_editor):
    path = "/Users/elliottlovell/HealthNetworkCSVs"  # Set path of new directory here
    os.chdir(path)  # changes the directory
    Clinic = apps.get_model('clinics', 'Clinic')
    Professional = apps.get_model('professionals', 'Professional')
    Profession = apps.get_model('professionals', 'Profession')
    ProfessionType = apps.get_model('professionals', 'ProfessionType')
    Role = apps.get_model('professionals', 'Role')

    missing_clinics_set = set()
    new_professionals = []
    with open('clinic_psychologists_updated.csv', "r+", encoding="utf-8") as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            full_name = row["Full Name"]
            full_name_matches = re.match(NAMED_AND_OCCUPATION_REGEX, full_name)
            if full_name_matches:
                full_name_groups = full_name_matches.groups()
                first_name = full_name_groups[0].title()
                last_name = full_name_groups[1].title()
                spaced_profession_type = full_name_groups[2]
            else:
                print(f"Regex error for {full_name}")
                continue

            clinic_name = row["Organisation"]
            areas_of_interest = row["Areas of Interest/Comments"]
            waiting_times = row["Waiting Times"]
            fees = row["Fees"]
            bulk_billing = row["Bulk Billing"]

            existing_professionals_filtered = Professional.objects.filter(first_name=first_name, last_name=last_name)
            if len(existing_professionals_filtered) == 1:
                existing_professional = existing_professionals_filtered[0]
                existing_professional.wait_times = waiting_times
                existing_professional.fees = fees
                existing_professional.bulk_billing = bulk_billing
                if not existing_professional.description and areas_of_interest:
                    existing_professional.description = areas_of_interest
                existing_professional.save()
                continue
            elif len(existing_professionals_filtered) > 1:
                print(f"Error: Multiple professionals named {first_name} {last_name}")
            else:
                new_professionals.append(f"{first_name} {last_name}")
                professional, _ = Professional.objects.get_or_create(
                    first_name=first_name,
                    last_name=last_name,
                    wait_times=waiting_times,
                    fees=fees,
                    bulk_billing=bulk_billing,
                    description=areas_of_interest,
                )

            profession_type, _ = ProfessionType.objects.get_or_create(
                name=spaced_profession_type
            )

            profession, _ = Profession.objects.get_or_create(
                active=True,
                professional=professional,
                profession_type=profession_type
            )

            clinic = Clinic.objects.get(name=clinic_name)

            if not clinic:
                missing_clinics_set.add(clinic_name)
            else:
                role, _ = Role.objects.get_or_create(
                    professional=professional,
                    clinic=clinic,
                )
            continue
    print("MISSED CLINICS", missing_clinics_set)
    print("NEW PROFESSIONALS", new_professionals)


def backwards(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('professionals', '0005_auto_20200525_1042'),
    ]

    operations = [
        migrations.RunPython(forwards, backwards)
    ]
